#!/usr/bin/env bash

if [ -z "$1" ]; then
    echo "Usage: earbuds <device_name>"
    exit 1
fi

echo "Scanning for devices..."

# Use a more reliable method to scan and get devices
{
    echo "scan on"
    sleep 12  # Give more time for scanning
    echo "devices"
    echo "scan off"
    echo "quit"
} | bluetoothctl > /tmp/bt_scan_output 2>&1 &

# Wait for the scanning process to complete
wait

# Extract devices from the output
devices=$(grep "Device " /tmp/bt_scan_output)

device_found=false
target_mac=""
target_name=""

echo "Looking for devices matching '$1'..."

while IFS= read -r line; do
    # Skip empty lines
    [[ -z "$line" ]] && continue
    
    # Parse: Device MAC_ADDRESS Device_Name
    if [[ "$line" =~ Device\ ([A-Fa-f0-9:]+)\ (.+) ]]; then
        mac="${BASH_REMATCH[1]}"
        name="${BASH_REMATCH[2]}"
        
        # Get just the first word of the device name and convert to lowercase
        device_first_word=$(echo "$name" | cut -d' ' -f1 | tr '[:upper:]' '[:lower:]')
        input_lower=$(echo "$1" | tr '[:upper:]' '[:lower:]')
        
        echo "Found device: $name ($mac)"
        
        if [[ "$device_first_word" == *"$input_lower"* ]]; then
            echo "✓ Matched: $name ($mac)"
            target_mac="$mac"
            target_name="$name"
            device_found=true
            break
        fi
    fi
done <<< "$devices"

if [ "$device_found" = false ]; then
    echo "Device '$1' not found. Available devices:"
    while IFS= read -r line; do
        if [[ "$line" =~ Device\ ([A-Fa-f0-9:]+)\ (.+) ]]; then
            mac="${BASH_REMATCH[1]}"
            name="${BASH_REMATCH[2]}"
            echo "  $name ($mac)"
        fi
    done <<< "$devices"
    echo ""
    echo "Tips:"
    echo "- Make sure the device is in pairing mode"
    echo "- Try running the script again"
    echo "- Use just the first word of the device name (e.g., 'anker' for 'Anker SoundCore')"
    exit 1
fi

# Now handle the found device
echo "Processing $target_name ($target_mac)..."

# Check if device is already paired
paired_info=$(bluetoothctl info "$target_mac" 2>/dev/null | grep "Paired:")

if [[ "$paired_info" != *"yes"* ]]; then
    echo "Device not paired. Attempting to pair with $target_name..."
    
    # Make device discoverable/pairable
    bluetoothctl discoverable on >/dev/null 2>&1
    bluetoothctl pairable on >/dev/null 2>&1
    
    echo "Pairing... (this may take up to 30 seconds)"
    echo "Make sure your $target_name is in pairing mode!"
    
    if timeout 30s bluetoothctl pair "$target_mac"; then
        echo "✓ Successfully paired with $target_name"
        sleep 2
    else
        echo "✗ Pairing failed or timed out"
        echo "Make sure your device is in pairing/discoverable mode and try again."
        echo "You can also try manually: bluetoothctl pair $target_mac"
        exit 1
    fi
else
    echo "✓ Device already paired"
fi

echo "Connecting to $target_name..."
if timeout 15s bluetoothctl connect "$target_mac"; then
    echo "✓ Successfully connected to $target_name"
else
    echo "✗ Connection failed or timed out"
    echo "You can try manually: bluetoothctl connect $target_mac"
    exit 1
fi

# Cleanup
rm -f /tmp/bt_scan_output
